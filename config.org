#+TITLE: Config

* User information
#+begin_src emacs-lisp
(setq user-full-name "Silas de Jong"
      user-mail-address "silas.de.jong@hva.nl")
#+end_src
* Doom related
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code Nerd Font" :size 12))

(fringe-mode 0)
(setq-default line-spacing 1)

(setq doom-theme-light 'leuven)
(setq doom-theme-dark 'doom-monokai-spectrum)

(setq doom-theme doom-theme-light)

(setq org-directory "~/org/")
(setq display-line-numbers-type 'relative)

(setq doom-leader-alt-key "M-SPC")

(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Dashboard")
#+end_src

* Personal
** Variables
#+begin_src emacs-lisp
(setq evil-escape-key-sequence nil
      treemacs-position 'left
      neo-window-position 'left
      neo-window-width 30)
#+end_src

Switch to the new window after splitting
#+begin_src emacs-lisp
(setq evil-split-window-below nil
      evil-vsplit-window-right t)
#+end_src

Set popup rules
#+begin_src emacs-lisp
(set-popup-rule! "\\*doom:vterm-popup.*" :side 'right :size 0.3)
#+end_src

Sql settings
#+begin_src emacs-lisp
(setq sql-mysql-options '("-s" "--protocol" "tcp" "-P" "3306"))
(add-hook 'sql-interactive-mode-hook 'yas-minor-mode-on)
#+end_src

(un)safe local variables
#+begin_src emacs-lisp
(defun risky-local-variable-p (sym &optional _ignored) nil)
#+end_src
** Functions
#+begin_src emacs-lisp
;; TODO Fix this function
(defun tot/theme-toggle ()
  (interactive)
  (if (eq doom-theme doom-theme-dark)
      (setq doom-theme doom-theme-light)
    (setq doom-theme doom-theme-dark))
  (doom/reload-theme))

(defun tot/break-out-string-or-parens ()
  (interactive)
  (search-forward-regexp "[\"\)']"))


(defun tot/save-and-kill-buffer (&optional arg)
  "Save a buffer before killing"
  (interactive "P")
  (unless (or (string-match-p ".*\\*.*\\*.*" (buffer-name)) arg)
    (save-buffer))
  (kill-buffer))

(defun tot/kill-buffer-and-close-window ()
  "Kill and save buffer, then close the window"
  (interactive)
  (tot/save-and-kill-buffer)
  (delete-window))

(defun tot/window-split-smart ()
  "Splits window into two. It'll split so the difference between the height and the width of a window is as small as possible"
  (interactive)
  (let ((evil-vsplit-window-right t))
    (if (>= (window-pixel-height) (window-pixel-width))
        ;; then
        (+evil/window-split-and-follow)
      ;; else
      (evil-window-vsplit))))

;; SX mode
(defun tot/sx/display-question ()
  (interactive)
  (delete-other-windows)
  (sx-question-mode--display
   (tabulated-list-get-id)
   (tot/window-split-smart)))

(defun tot/sx/search-stackoverflow (query)
  (interactive "sSearch query: ")

  (sx-search "stackoverflow" query))

(defun tot/insert-filename ()
  (interactive)
  (counsel--find-file-1
 "Find file: " ""
 'insert
 'test))

(when (featurep! :editor multiple-cursors)
    (defun tot/make-mc-in-selection (start end)
    (interactive "r")
    (evil-exit-visual-state)
    (goto-char start)
    (let (
            (match-pos start)
            (regex-string (read-string "regex: ")))
        (ignore-errors
        (re-search-forward regex-string)
        (while (<= (point) end)
            (left-char)
            (evil-mc-make-cursor-here)
            (right-char)
            (re-search-forward regex-string))))
    (evil-mc-skip-and-goto-prev-cursor)))

(defmacro tot/ivy-read-and-execute (prompt collection &rest args)
  "Wrapper around `ivy-read', except for the COLLECTION is an alist
where the first entry is the selection for `ivy-read' and the second
is a form that will be evaulated if that option is selected.

E.g. (ivy-read-and-execute \"Say \" ((\"hi\" (message \"Hi\"))
                                    (\"bye\" (message \"Bye\"))))
If the you select `hi' then you get the message `Hi'
"
  `(pcase (ivy-read ,prompt ',collection ,@args)
     ,@collection))

(defmacro tot/add-digit-argument-def (name digit)
  `(defun ,name (&optional arg)
    (interactive "P")
    (when arg
      (mapc (lambda (x)
              (setq unread-command-events (nconc unread-command-events (list x)))
              )
            (string-to-vector (number-to-string arg))
            ))
    (setq unread-command-events (nconc unread-command-events (list ,digit)))))

(defun diff-last-two-kills (&optional diff)
  "Diff last couple of things in the kill-ring. With prefix open ediff."
  (interactive "P")
  (let* ((old "/tmp/old-kill")
         (new "/tmp/new-kill")
         (prev-ediff-quit-hook ediff-quit-hook))
    (cl-flet ((kill-temps
               ()
               (dolist (f (list old new))
                 (kill-buffer (find-buffer-visiting f)))
               (setq ediff-quit-hook prev-ediff-quit-hook)))
      (with-temp-file new
        (insert (current-kill 0 t)))
      (with-temp-file old
        (insert (current-kill 1 t)))
      (if (not diff)
          (progn
            (add-hook 'ediff-quit-hook #'kill-temps)
            (ediff old new))
        (diff old new "-u" t)))))

(defalias 'diff-last-two-clipboard-items 'diff-last-two-kills)

(defun tot/add-digit-argument (&optional arg)
  (interactive "P")
  (when arg
    (mapc (lambda (x)
            (setq unread-command-events (nconc unread-command-events (list x)))
            )
          (string-to-vector (number-to-string arg))
          ))
  (setq unread-command-events (nconc unread-command-events (list 49))))

(progn
  (tot/add-digit-argument-def tot/add-digit-argument-1 49)
  (tot/add-digit-argument-def tot/add-digit-argument-2 50)
  (tot/add-digit-argument-def tot/add-digit-argument-3 51)
  (tot/add-digit-argument-def tot/add-digit-argument-4 51)
  (tot/add-digit-argument-def tot/add-digit-argument-5 52)
  (tot/add-digit-argument-def tot/add-digit-argument-6 53)
  (tot/add-digit-argument-def tot/add-digit-argument-7 54)
  (tot/add-digit-argument-def tot/add-digit-argument-8 55)
  (tot/add-digit-argument-def tot/add-digit-argument-9 56)
  (tot/add-digit-argument-def tot/add-digit-argument-0 57))
#+end_src

#+RESULTS:
: tot/add-digit-argument-0

* Keymap
#+begin_src emacs-lisp

(map!
 (:leader "t t" #'tot/theme-toggle
  "t a" #'auto-fill-mode)
 :v "V" 'er/contract-region
 :v "v" 'er/expand-region
 :i "M-TAB" 'tot/break-out-string-or-parens

 :nvime
 "M-n" #'evil-buffer-new
 "M-w" #'tot/save-and-kill-buffer
 "C-M-n" #'+workspace/new
 "C-M-w" #'+workspace/delete
 "M-N" #'tot/window-split-smart
 "M-W" #'evil-window-delete
 "M-i" #'er/expand-region

 (:leader
  "b x" #'tot/kill-buffer-and-close-window
  "p !" #'projectile-run-async-shell-command-in-root
  "o c" #'cfw:open-org-calendar)

 (:map org-mode-map
  :localleader
  "S" #'org-sidebar-tree-toggle
  "RET" #'org-sidebar-tree-jump)

 (:map org-agenda-mode-map
  "M-l" #'org-agenda-later
  "M-h" #'org-agenda-earlier)

 (:map yas-minor-mode-map
  "C-SPC" #'yas-maybe-expand)

 (:map ranger-mode-map
  "M-1" 'winum-select-window-1
  "M-2" 'winum-select-window-2
  "M-3" 'winum-select-window-3
  "M-4" 'winum-select-window-4
  "M-5" 'winum-select-window-5
  "M-6" 'winum-select-window-6
  "M-7" 'winum-select-window-7
  "M-8" 'winum-select-window-8
  "M-9" 'winum-select-window-9)

 ;; Quick window switching with Meta-0..9
 "M-1" 'winum-select-window-1
 "M-2" 'winum-select-window-2
 "M-3" 'winum-select-window-3
 "M-4" 'winum-select-window-4
 "M-5" 'winum-select-window-5
 "M-6" 'winum-select-window-6
 "M-7" 'winum-select-window-7
 "M-8" 'winum-select-window-8
 "M-9" 'winum-select-window-9
 ;; "M-0" #'tot/neotree-toggle-function

 (:leader ;; Backup keybindings for in terminal mode
  "1" 'winum-select-window-1
  "2" 'winum-select-window-2
  "3" 'winum-select-window-3
  "4" 'winum-select-window-4
  "5" 'winum-select-window-5
  "6" 'winum-select-window-6
  "7" 'winum-select-window-7
  "8" 'winum-select-window-8
  "9" 'winum-select-window-9)

 ;; Quick workspace switch with Shift+Meta-0..9
 "C-M-1" '+workspace/switch-to-0
 "C-M-2" '+workspace/switch-to-1
 "C-M-3" '+workspace/switch-to-2
 "C-M-4" '+workspace/switch-to-3
 "C-M-5" '+workspace/switch-to-4
 "C-M-6" '+workspace/switch-to-5
 "C-M-7" '+workspace/switch-to-6
 "C-M-8" '+workspace/switch-to-7
 "C-M-9" '+workspace/switch-to-8
 "C-M-0" '+workspace/switch-to-9

 (:leader
  "b c" #'tot/save-and-kill-buffer
  "/" #'swiper
  "?" #'+default/search-project
  "s s" #'tot/sx/search-stackoverflow)

 :v
 "s" #'tot/make-mc-in-selection)

(map! :map sx-question-list-mode-map
      :n
      "RET" #'tot/sx/display-question
      :ni
      "TAB" #'other-window
      "q" #'kill-current-buffer)

(map! :map sx-question-mode-map
      :ni
      "q" #'kill-buffer-and-window
      "TAB" #'other-window
      :i
      "k" #'sx-question-mode-previous-section
      "j" #'sx-question-mode-next-section)
#+end_src

Windows hydra
#+begin_src emacs-lisp
(defhydra windows-hydra (:hint nil) ""
  ("s" split-window-below "Horizontal" :column "Splits")
  ("v" split-window-right "Vertical" :column "Splits")
  ("c" +workspace/close-window-or-workspace "Close")
  ("h" windmove-left "Left" :column "Switch window")
  ("l" windmove-right "Right" :column "Switch window")
  ("k" windmove-up "Up" :column "Switch window")
  ("j" windmove-down "Down" :column "Switch window")
  ("H" hydra-move-splitter-left "Left" :column "Resize")
  ("L" hydra-move-splitter-right "Up" :column "Resize")
  ("J" hydra-move-splitter-down "Down" :column "Resize")
  ("K" hydra-move-splitter-up "Up" :column "Resize")
  ("|" evil-window-set-width "Set width" :column "Resize")
  ("-" evil-window-set-width "Set height" :column "Resize")
  ("=" balance-windows "Balance" :column "Resize")
  ("p" previous-buffer "Previous" :column "Buffer")
  ("n" next-buffer "Next" :column "Buffer")
  ("b" ivy-switch-buffer "switch-buffer" :column "Buffer")
  ("f" find-file "find-file" :column "Buffer")
  ("K" kill-current-buffer "Kill" :column "Buffer")
  ("m" ace-swap-window "Swap buffers" :column "Buffer")
  ("M-h" evil-scroll-column-left "Left" :column "Adjustment")
  ("M-j" evil-scroll-line-down "Down" :column "Adjustment")
  ("M-k" evil-scroll-line-up "Up" :column "Adjustment")
  ("M-l" evil-scroll-column-right "Right" :column "Adjustment"))

(map! :leader "w ." 'windows-hydra/body)
#+end_src

* Packages
** persp-mode
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src
** Winum
#+begin_src emacs-lisp
(after! 'winum
  (setq winum-scope 'visible))
#+end_src
** Projects
#+begin_src emacs-lisp
(use-package! projectile
  :config
  (setq projectile-project-search-path '("~/proj" "~/repos")
        projectile-require-project-root nil))
#+end_src
** Pretty symbols
#+begin_src emacs-lisp
(when (featurep! :ui pretty-code)
  (setq +pretty-code-symbols '(;; :name "»"
                               ;; :src_block "»"
                               ;; :src_block_end "«"
                               ;; :quote "“"
                               ;; :quote_end "”"
                               ;; :lambda "λ"
                               ;; :def "ƒ"
                               ;; :defun "ƒ"
                               ;; :composition "∘"
                               ;; :map "↦"
                               ;; :null "∅"
                               ;; :not "￢"
                               ;; :and "∧"
                               ;; :or "∨"
                               ;; :for "∀"
                               ;; :some "∃"
                               ;; :tuple "⨂"
                               ;; :dot "•"
                               ;; :begin_quote   "❮"
                               ;; :end_quote     "❯"
                               ;; :begin_export  "⯮"
                               ;; :end_export    "⯬"
                               :priority_a   "⬆"
                               :priority_b   "■"
                               :priority_c   "⬇"
                               ;; :em_dash       "—"
                               :property      "☸"
                               :properties    "⚙"
                               ;; :checkbox      "☐"
                               ;; :checkedbox    "☑"
                               )))
#+end_src

** Calc
#+begin_src emacs-lisp
(setq calc-algebraic-mode t)
#+end_src
** CalFW
#+begin_src emacs-lisp
;; (after! (org org-agenda)
;;   (map!
;;    (:leader
;;     "o c" #'cfw:open-org-calendar)
;;    (:map (cfw:calendar-mode-map cfw:org-custom-map cfw:org-schedule-map)
;;     "SPC" nil
;;     "q" #'kill-current-buffer)))
#+end_src
** Eshell
Fix Eshell company lags
#+begin_src emacs-lisp
(setq-hook! 'eshell-mode-hook company-idle-delay nil)
#+end_src

#+begin_src emacs-lisp
(when (featurep! :term eshell)
  (add-hook
   'eshell-mode-hook
   (lambda ()
     (setq pcomplete-cycle-completions nil)
     (yas-minor-mode-on))))

(defun tot/eshell-other-window ()
  "Open EShell in another window"
  (interactive)
  (tot/window-split-smart)
  (eshell))

(defun tot/eshell-insert-at-beginning ()
   "Goes to the beginning of prompt and goes into insert mode"
   (interactive)
   (when (eq major-mode 'eshell-mode)
     (eshell-bol)
     (evil-insert-line)))

(defalias 'eshell/o 'find-file)
(defalias 'eshell/sp 'find-file-other-window)
#+end_src
** Magit
#+begin_src emacs-lisp
(after! forge
  (add-to-list 'forge-alist
               '("gitlab.fdmci.hva.nl" "gitlab.fdmci.hva.nl/api/v4" "gitlab.fdmci.hva.nl" forge-gitlab-repository))

  (setq magit-repository-directories `(("~/repos/" . 1)
                                       ("~/proj/" . 1)))

  (add-hook 'focus-in-hook 'magit-refresh-all)

  ;; Add transient key to show issues currently assigned to myself
  (transient-replace-suffix 'forge-dispatch "m i" '(2 "m i" "Your issues" forge-list-assigned-issues))


  ;; For some godforsaken reason I have to manually revert some diff that was mentioned in an issue that they never fixed
  ;; https://github.com/magit/ghub/issues/155
  (defun ghub--url-encode-params (params)
    (mapconcat (lambda (param)
                 (pcase-let ((`(,key . ,val) param))
                   (concat (url-hexify-string (symbol-name key)) "="
                           (if (integerp val)
                               (number-to-string val)
                             (url-hexify-string val)))))
               params "&")))
#+end_src

Add some logical keybindings to smerge mode

#+begin_src emacs-lisp
;; (map! :map smerge-mode-map
;;       :localleader
;;       :n
;;       "n" #'smerge-next
;;       "p" #'smerge-prev
;;       :prefix ("k" . "keep")
;;       "k" #'smerge-keep-current
;;       "u" #'smerge-keep-upper
;;       "l" #'smerge-keep-lower)
#+end_src
** Org

#+begin_src emacs-lisp
(when (featurep! :lang org)
  (after! org
    (map! :map org-mode-map
          :localleader "C-e" 'org-edit-src-code)
    (setq org-startup-folded 'content
          org-agenda-inhibit-startup nil
          org-image-actual-width '(500)
          org-startup-with-inline-images t)))
#+end_src

To insert images in org mode from the clipboard
#+begin_src emacs-lisp
(setq-default org-download-image-dir "~/org/attachments")
#+end_src

*** org-roam :ATTACH:
:PROPERTIES:
:ID:       14fccfff-b7be-4cd1-a3fd-7f2b890d26ca
:END:
#+begin_src emacs-lisp
(when (featurep! :lang org)
  (after! org
    (setq org-roam-directory (expand-file-name "~/org"))
    (setq org-agenda-files '("~/org"))
    (push "~/org/daily" org-agenda-files)

    (map! :leader "'" #'org-roam-node-find)
    ))
#+end_src



[[attachment:_20220524_235322screenshot.png]]
#+begin_src emacs-lisp
(defadvice! yeet/org-roam-in-own-workspace-a (&rest _)
  "Open all roam buffers in there own workspace."
  :before #'org-roam-node-find
  :before #'org-roam-node-random
  :before #'org-roam-buffer-display-dedicated
  :before #'org-roam-buffer-toggle
  (when (featurep! :ui workspaces)
    (+workspace-switch "*roam*" t)))
#+end_src
**** org-roam-ui
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(after! org-roam-ui
  (org-roam-ui-follow-mode)
  (map! :leader "n r g" #'org-roam-ui-open
        :mode org-mode
        :localleader "m g" #'org-roam-ui-open))
#+end_src

*** Presentations
#+begin_src emacs-lisp
(defun dw/org-start-presentation ()
  (interactive)
  (org-tree-slide-mode 1)
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1)
  (setq display-line-numbers nil))

(defun dw/org-end-presentation ()
  (interactive)
  (text-scale-mode 0)
  (org-tree-slide-mode 0)
  ;; (setq display-line-numbers )
  )

(use-package org-tree-slide
  :defer t
  :after org
  :commands org-tree-slide-mode
  :config
  (evil-define-key 'normal org-tree-slide-mode-map
    (kbd "q") 'dw/org-end-presentation
    (kbd "C-j") 'org-tree-slide-move-next-tree
    (kbd "C-k") 'org-tree-slide-move-previous-tree)
  (setq org-tree-slide-slide-in-effect nil
        org-tree-slide-activate-message "Presentation started."
        org-tree-slide-deactivate-message "Presentation ended."
        org-tree-slide-header t
        org-tree-slide-never-touch-face nil
        org-tree-slide-breadcrumbs " // "
        ))

(map! :after org
      :map org-mode-map
      :leader "tp" #'dw/org-start-presentation)
#+end_src

*** LaTeX
#+begin_src emacs-lisp
;; (after! org
;;   (setq org-latex-classes '("article"
;;                  "\\documentclass[11pt,a4paper]{article}
;; \\usepackage[utf8]{inputenc}
;; \\usepackage[T1]{fontenc}
;; \\usepackage{fixltx2e}
;; \\usepackage{graphicx}
;; \\usepackage{longtable}
;; \\usepackage{float}
;; \\usepackage{wrapfig}
;; \\usepackage{rotating}
;; \\usepackage[normalem]{ulem}
;; \\usepackage{amsmath}
;; \\usepackage{textcomp}
;; \\usepackage{marvosym}
;; \\usepackage{wasysym}
;; \\usepackage{amssymb}
;; \\usepackage{hyperref}
;; \\usepackage{mathpazo}
;; \\usepackage{color}
;; \\usepackage{enumerate}
;; \\definecolor{bg}{rgb}{0.95,0.95,0.95}
;; \\tolerance=1000
;;       [NO-DEFAULT-PACKAGES]
;;       [PACKAGES]
;;       [EXTRA]
;; \\linespread{1.1}
;; \\hypersetup{pdfborder=0 0 0}"
;;                  ("\\section{%s}" . "\\section*{%s}")
;;                  ("\\subsection{%s}" . "\\subsection*{%s}")
;;                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                  ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
#+end_src

#+RESULTS:
#+begin_example
(article \documentclass[11pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{mathpazo}
\usepackage{color}
\usepackage{enumerate}
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\tolerance=1000
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
\linespread{1.1}
\hypersetup{pdfborder=0 0 0} (\section{%s} . \section*{%s}) (\subsection{%s} . \subsection*{%s}) (\subsubsection{%s} . \subsubsection*{%s}) (\paragraph{%s} . \paragraph*{%s}))
#+end_example


Load org-fragtog for live Latex previews
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

Load org-modern for nice looking org documents
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

*** Visuals
#+begin_src emacs-lisp
;; (after! org-superstar
;;   (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
;;         org-superstar-prettify-item-bullets t ))
#+end_src

Nicer folding character
#+begin_src emacs-lisp
;; (after! org
;;   (setq org-ellipsis " ▾ "
;;         org-hide-leading-stars t
;;         org-priority-highest ?A
;;         org-priority-lowest ?E
;;         org-priority-faces
;;         '((?A . 'all-the-icons-red)
;;           (?B . 'all-the-icons-orange)
;;           (?C . 'all-the-icons-yellow)
;;           (?D . 'all-the-icons-green)
;;           (?E . 'all-the-icons-blue))))
#+end_src

#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook 'org-modern-mode))
#+end_src
*** Todo's
#+begin_src emacs-lisp
(setq org-agenda-sorting-strategy '(todo-state-up priority-down))
#+end_src
*** Contacts
#+begin_src emacs-lisp
(after! org
  (setq org-contacts-files '("/home/silas/org/contacts.org")))
#+end_src
*** Capture
**** Create capture frame
Sadly the delete-other-windows doesn't work since ~org-capture~ isn't done yet. Curse you synchronous programming!
#+begin_src emacs-lisp
(defun tot/display-capture-frame ()
  (set-frame-size (selected-frame) 80 20)
  (org-capture)
  (delete-other-windows))
#+end_src

**** Templates
#+begin_src emacs-lisp
(after! org-capture
  ;;(load "~/.doom.d/org-imdb/org-imdb.el")

  (setq org-capture-templates
        (doct '(("Todo" :keys "t"
                 :file "~/org/todo.org"
                 :prepend t
                 :headline "Inbox"
                 :template ("* TODO %^{Description} %^G"
                            "%?"))
                ("Agenda" :keys "a"
                 :file "~/org/todo.org"
                 :prepend t
                 :headline "Agenda"
                 :template ("* %^{Description} %^G"
                            "%^T"
                            "%?"))
                ("Watchlist" :keys "w"
                 :file "~/org/watchlist.org"
                 :headline "Watchlist"
                 :immediate-finish t
                 :template ("* [ ] %^{Title}"))
                ("Watchlist with IMDB" :keys "W"
                 :file "~/org/watchlist.org"
                 :headline "Watchlist"
                 :immediate-finish t
                 :template ("* [ ] %(org-imdb-capture-title)"))
                ("Diary entry" :keys "d"
                 :file "~/org/diary.org"
                 :prepend t
                 :headline "Entries"
                 :template ("* %^t"
                            ":PROPERTIES:"
                            ":CREATED: %U"
                            ":END:"
                            "%?"))))))
#+end_src
*** Alerts
#+begin_src emacs-lisp
(require 'org-alert)

(org-alert-enable)
(setq alert-default-style 'notifications)
#+end_src
*** Super agenda
#+begin_src emacs-lisp
;; (after! org
;;   (require 'org-super-agenda)

;; (setq org-agenda-skip-scheduled-if-done t
;;       org-agenda-skip-deadline-if-done t
;;       org-agenda-include-deadlines t
;;       org-agenda-block-separator nil
;;       org-agenda-tags-column 80 ;; from testing this seems to be a good value
;;       org-agenda-compact-blocks t)

;; (setq org-agenda-custom-commands
;;  '(("o" "overview"
;;     ((agenda "" ((org-agenda-span 'day)
;;                  (org-super-agenda-groups
;;                   '((:name "Today"
;;                      :time-grid t
;;                      :date today
;;                      :todo "TODAY"
;;                      :order 1)
;;                     ))))
;;      (alltodo "" ((org-agenda-overriding-header "")
;;                   (org-super-agenda-groups
;;                    '(
;;                      (:name "Today"
;;                       :date today)
;;                      (:name "Due soon"
;;                       :deadline future)
;;                      (:name "Schedule"
;;                       :date t)
;;                      (:name "Todo's"
;;                       :todo ("START" "TODO"))
;;                      (:name "Projects"
;;                       :todo "PROJ")
;;                      (:discard (:anything))))))))))

;;   (org-super-agenda-mode)
;;   )
#+end_src
** W3M
#+begin_src emacs-lisp
(map! :map w3m-mode-map
      :i
      "j" #'w3m-next-anchor
      "k" #'w3m-previous-anchor
      "K" #'w3m-scroll-down
      "J" #'w3m-scroll-up
      "/" #'evil-search-forward
      "?" #'evil-search-backward
      "n" #'evil-search-next
      "N" #'evil-search-previous
      "M-/" #'swiper)
#+end_src
** emojify-mode
#+begin_src emacs-lisp
(after! emojify-mode
  (global-emojify-mode 1))
#+end_src
** Neotree
#+begin_src emacs-lisp
(when (featurep! :ui neotree)
    (defun winum-assign-0-to-neotree ()
    (when (string-match-p ".*NeoTree.*" (buffer-name)) 0))


    (defun tot/neotree-toggle-function ()
    (interactive)
    (if (neo-global--window-exists-p)
        (if (string-match-p ".\\*NeoTree\\*.*" (buffer-name))
            (neotree-hide)
            ;; else
            (winum-select-window-0))
        ;; else
        (+neotree/open)
        ))

    (setq winum-assign-functions '(winum-assign-0-to-neotree))
    (setq winum-auto-assign-0-to-minibuffer nil))
#+end_src
** Treemacs
#+begin_src emacs-lisp
(use-package! treemacs
  :config
  (setq treemacs-select-when-already-in-treemacs 'close
        treemacs-wrap-around nil
        treemacs-show-hidden-files nil)


  (map! :gni "M-0" 'treemacs-select-window
        :leader "0" 'treemacs-select-window))
#+end_src
** Dired
#+begin_src emacs-lisp
;; (add-hook 'ranger-mode-hook 'dired-filter-mode)
#+end_src
** Avy
Custom Avy commands
#+begin_src emacs-lisp
(defun tot/avy-goto-line-goto-word (&optional direction arg)
  "Jump to a word start on the current line only."
  (interactive "P")
  (if arg
      (let* ((beginning (save-excursion (pcase direction
                                          ("next" (evil-next-line arg))
                                          ("previous" (evil-previous-line arg)))
                                        (beginning-of-line)
                                        (point)))
             (end (save-excursion (pcase direction
                                    ("next" (evil-next-line arg))
                                    ("previous" (evil-previous-line arg)))
                                  (end-of-line)
                                  (point))))
        (avy-goto-word-0 nil beginning end))
    (progn (avy-goto-line)
           (avy-with avy-goto-word-0
             (avy-goto-word-0 nil (line-beginning-position) (line-end-position))))))

(defun tot/avy-goto-char-timer (&optional arg)
  "Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it)."
  (interactive "P")
  (let ((avy-all-windows (if arg
                             (not avy-all-windows)
                           avy-all-windows)))
    (avy-with avy-goto-char-timer
      (setq avy--old-cands (avy--read-candidates))
      (if (> (length avy--old-cands) 1)
          (avy-process avy--old-cands)
        (goto-char (car (car (car avy--old-cands)))))
      (length avy--old-cands))))

#+end_src

Avy setup
#+begin_src emacs-lisp
(after! avy
  (setq avy-single-candidate-jump t)
  ;;(map! :n "M-f" 'tot/avy-goto-char-timer)
  (setq avy-timeout-seconds 0.3))

(map! :n
      ;; "M-f" 'tot/avy-goto-line-goto-word
      "M-f" 'avy-goto-char-2)
#+end_src

** Elfeed
#+begin_src emacs-lisp
(use-package! elfeed
  :config
    (map! :g
          :desc "Open Elfeed" :leader "o F" 'elfeed))
#+end_src

** Company
#+begin_src emacs-lisp

(map! :after company
 :map company-active-map
      "<tab>" 'yas-expand)

(setq company-backends '((company-files
                          company-capf))
      company-dabbrev-other-buffers nil)
#+end_src
** Java
#+begin_src emacs-lisp
(setenv "JAVA_HOME"  "/usr/lib/jvm/default")
(setq lsp-java-java-path "/usr/lib/jvm/default/bin/java")
#+end_src
#+begin_src emacs-lisp
;; (after! 'meghanda
;;   (map! :map meghanada-mode-map
;;         :localleader "c" 'meghanada-exec-main))
#+end_src

Scuffed way to create java projects
#+begin_src emacs-lisp
(defun tot/java/create-and-open-project ()
  (interactive)
  (let* ((project-name (ivy-read "Project name: " '()))
         (project-root (expand-file-name project-name "~/_projects"))
         (project-run-command (concat "mvn package && java -cp target/" project-name "-1.0-SNAPSHOT.jar com.tot.app.App")))
    (shell-command
     (concat "cd ~/_projects; mvn archetype:generate -DgroupId=com.tot.app -DartifactId=" project-name " -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false"))
    (shell-command
     (concat "cd " project-root "; sed -i 's/1.7/11/g' pom.xml; git init"))
    (with-temp-file (expand-file-name ".dir-locals.el" project-root)
      (insert "((nil . ((projectile-project-run-cmd . \"" project-run-command "\"))))"))
    (+workspaces-switch-to-project-h project-root)
    ;; (find-file (expand-file-name  "src/main/java/com/tot/app/App.java" project-root))
    (delete-other-windows)
    ))
#+end_src

#+begin_src emacs-lisp
(after! lsp
  (map! :map lsp-ui-mode-map
        :n "RET" 'lsp-ui-sideline-apply-code-actions))
#+end_src

#+begin_src emacs-lisp
(after! meghanada

  (defun tot/java-meghanada-parse-pom ()
    (let* ((root doom-modeline--project-root)
           (parse-tree (assq 'project (xml-parse-file (concat root "pom.xml")))))
      `((project-root . ,doom-modeline--project-root)
        (group-id . ,(alist-get 'groupId
                                parse-tree))
        (name . ,(alist-get 'name
                            parse-tree))
        (artifact-id . ,(alist-get 'artifactId
                                   parse-tree)))))


  (defun tot/java-meghanada-compile-project ()
    (interactive)
    (let* ((properties (tot/java-meghanada-parse-pom))
           (default-directory (alist-get 'project-root properties)))
      (start-process "compile-java" "*tot java compile*" "mvn" "package")))

  (defun tot/java-meghanada-run-project ()
    (interactive)
    (let* ((properties (tot/java-meghanada-parse-pom))
           (default-directory (alist-get 'project-root properties))
           (artifact-id (alist-get 'artifact-id properties))
           (group-id (alist-get 'group-id properties)))
      (cd default-directory)
      (start-process "java -cp "
                     (concat "target " artifact-id " -1.0-SNAPSHOT.jar ")
                     (concat group-id ".App")))))
#+end_src
** aggressive indent
#+begin_src emacs-lisp
(add-hook 'lispy-mode-hook #'aggressive-indent-mode)
(add-hook 'css-mode-hook #'aggressive-indent-mode)
#+end_src
** Centaur tabs
#+begin_src emacs-lisp
(when (featurep! centaur-tabs)
  (use-package centaur-tabs
    :config
    (setq
     ;;centaur-tabs-style "rounded"
     ;; centaur-tabs-height "24"
     centaur-tabs-set-close-button nil
     centaur-tabs-set-modified-marker t)
    :hook
    (dired-mode . centaur-tabs-local-mode)))
#+end_src
** Clojure
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.cljs\\.hl\\'" . clojurescript-mode))
#+end_src
** Hledger
#+begin_src emacs-lisp

(defun my/hledger-new-entry ()
  (interactive)
  (hledger-jentry)
  (insert (org-read-date) " ")
  (evil-insert-state))

(defun my/hledger-delete-transaction () ;; TODO
  (interactive)
  (mark-paragraph)
  (kill-region)
  (kill-line))

(use-package! hledger-mode
  :config
  (setq hledger-jfile (expand-file-name
                       "~/finance/2021.journal")
        hledger-show-expanded-report nil)
  (map! :map hledger-mode-map
        "C-j"                            #'hledger-forward-entry
        "C-k"                            #'hledger-backward-entry
        "M-k" :desc "increase amount"    #'hledger-increment-amount
        "M-j" :desc "decrease amount"    (cmd! (hledger-increment-amount -1))
        :localleader
        "vr"  :desc   "view next report" #'hledger-next-report
        "vo"  :desc "view overal report" #'hledger-overall-report
        "a"   :desc    "add a new entry" #'my/hledger-new-entry))
#+end_src
** Beancount-mode
#+begin_src emacs-lisp
(use-package! beancount-mode
  :after beancount-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode)))
#+end_src

** haskell
#+begin_src emacs-lisp
(add-hook 'haskell-mode-hook #'lsp)
#+end_src

#+begin_src emacs-lisp
(setq haskell-process-wrapper-function
      (lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args)))

#+end_src
** ng2-mode
#+begin_src emacs-lisp
(with-eval-after-load 'typescript-mode (add-hook 'typescript-mode-hook #'lsp))
#+end_src
** Fira-code-mode
#+begin_src emacs-lisp
;;(after! fira-code-mode
  ;;(global-fira-code-mode)
  ;;(fira-code-mode-set-font))
#+end_src
** direnv
#+begin_src emacs-lisp
(use-package! direnv
  :config
  (direnv-mode))
#+end_src
** python
#+begin_src emacs-lisp
(map! :mode python-mode
      :localleader "p" #'poetry)
#+end_src

** C++

#+begin_src emacs-lisp
(map! :map c++-mode-map
      :i "C-<tab>" #'yas-next-field-or-maybe-expand
      :desc "Make compile" :localleader :n "c" #'counsel-compile)
#+end_src

#+RESULTS:

** Nix
#+begin_src emacs-lisp
(add-hook 'nix-mode-hook #'lsp)
#+end_src

** Rust
#+begin_src emacs-lisp
;; (after! rustic
;;   (setq rustic-lsp-server 'rls))
#+end_src

** LSP
#+begin_src emacs-lisp
(after! lsp
  (setq lsp-ui-sideline-show-code-actions t))
#+end_src
** Tree-sitter
#+begin_src emacs-lisp
(use-package! tree-sitter
  :config
  ;; activate tree-sitter on any buffer containing code for which it has a parser available
  (global-tree-sitter-mode)
  ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
  ;; by switching on and off
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package! tree-sitter-langs
  :after tree-sitter)
#+end_src
** Javascript/Typescript
#+begin_src emacs-lisp
(map! :map 'typescript-mode-map
      :leader "t i" #'lsp-ui-sideline-toggle-symbols-info)
#+end_src

Use prettier-emacs for file formatting in projects
#+begin_src emacs-lisp
(use-package! prettier-js
  :hook (web-mode . prettier-js-mode)
  :hook (js2-mode . prettier-js-mode)
  :hook (typescript-mode . prettier-js-mode)
  :hook (css-mode . prettier-js-mode))
#+end_src

* Hooks
#+begin_src emacs-lisp
(add-hook 'delete-frame-hook '+workspace/delete)
;;(add-hook 'emacs-startup-hook 'org-agenda-list)

(remove-hook! '(markdown-mode-hook
                TeX-mode-hook
                rst-mode-hook
                mu4e-compose-mode-hook
                message-mode-hook
                git-commit-mode-hook)
  #'flyspell-mode
  )
#+end_src
